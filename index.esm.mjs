import*as e from"@coral-xyz/anchor";import{PublicKey as n,Keypair as r,TransactionMessage as t,VersionedTransaction as o}from"@solana/web3.js";import{TOKEN_PROGRAM_ID as i,getAssociatedTokenAddressSync as c,ASSOCIATED_TOKEN_PROGRAM_ID as s}from"@solana/spl-token";import*as a from"dotenv";function u(e,n){e.prototype=Object.create(n.prototype),e.prototype.constructor=e,m(e,n)}function m(e,n){return m=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,n){return e.__proto__=n,e},m(e,n)}var l=new e.web3.PublicKey("G34e7zJuRne2pfDHh9YayixM2rJFdwV624NUzbj9FRR5");function h(e){return n.findProgramAddressSync([Buffer.from("main_account"),Buffer.from(e)],l)[0]}function f(e,r){return n.findProgramAddressSync([Buffer.from("sub_account"),e.toBuffer(),r.toBuffer()],l)[0]}var p=/*#__PURE__*/function(){function n(){this.program=void 0,this.provider=void 0,this.connection=void 0,this.signer=void 0,this.wallet=void 0}n.initialize=function(){try{var r=new n;return a.config(),r.wallet=r.loadWallet(),r.signer=r.wallet.payer,r.provider=new e.AnchorProvider(r.loadRpc(),r.wallet,{preflightCommitment:"processed"}),r.connection=r.provider.connection,r.program=r.getProgram("./utils/aisa_contracts.json",r.provider),Promise.resolve(r)}catch(e){return Promise.reject(e)}};var i=n.prototype;return i.getProgram=function(n,r){var t=JSON.parse(JSON.stringify(require(n)));return new e.Program(t,r)},i.loadRpc=function(){var n=process.env.RPC_URL;if(!n)throw new Error("RPC URL not defined in .env");try{return new e.web3.Connection(n,{commitment:"processed"})}catch(e){throw new Error("Failed to create RPC connection: "+e.message)}},i.loadWallet=function(){var n=process.env.PRIVATE_KEY;if(!n)throw new Error("PRIVATE_KEY not defined in .env");try{var t=Uint8Array.from(JSON.parse(n));if(64!==t.length)throw new Error("Invalid private key length");var o=r.fromSecretKey(t);return new e.Wallet(o)}catch(e){throw new Error("Invalid private key format : "+e.message)}},i.sendAndConfirmTransaction=function(e,n,r,i){try{var c=this;return Promise.resolve(function(s,a){try{var u=Promise.resolve(c.connection.getLatestBlockhash()).then(function(s){var a=new t({payerKey:n,recentBlockhash:s.blockhash,instructions:e}).compileToV0Message(i),u=new o(a);return u.sign(r),Promise.resolve(c.connection.sendTransaction(u)).then(function(e){return Promise.resolve(c.connection.confirmTransaction({blockhash:s.blockhash,lastValidBlockHeight:s.lastValidBlockHeight,signature:e},"confirmed")).then(function(){return e})})})}catch(e){return a(e)}return u&&u.then?u.then(void 0,a):u}(0,function(e){console.log(e)}))}catch(e){return Promise.reject(e)}},n}(),y=/*#__PURE__*/function(n){function r(){return n.apply(this,arguments)||this}u(r,n),r.initialize=function(){try{return Promise.resolve(n.initialize.call(this))}catch(e){return Promise.reject(e)}};var t=r.prototype;return t.createMainAccount=function(e,n){try{var r=this,t=[];return Promise.resolve(r.program.methods.createMainAccount(e,n).accounts({owner:r.signer.publicKey}).instruction()).then(function(e){return t.push(e),Promise.resolve(r.sendAndConfirmTransaction(t,r.signer.publicKey,[r.signer]))})}catch(e){return Promise.reject(e)}},t.getMainAccountState=function(e){try{return Promise.resolve(this.program.account.mainAccount.fetch(h(Uint8Array.from(e)))).then(function(e){return[e.owner,e.globalWhitelistedPayees]})}catch(e){return Promise.reject(e)}},t.getSubAccountState=function(e,n){try{var r=h(Uint8Array.from(e));return Promise.resolve(this.program.account.subAccount.fetch(f(r,n))).then(function(e){return[e.whitelistedPayees,e.whitelistedTokens,e.paymentInterval,e.paymentCount,e.maxPerPayment,e.lastPaymentTimestamp]})}catch(e){return Promise.reject(e)}},t.updateMainAccountRules=function(e,n){try{var r=this,t=[],o=h(Uint8Array.from(e));return Promise.resolve(r.program.methods.updateGlobalWhitelistedPayees(n).accounts({owner:r.signer.publicKey,mainAccount:o}).instruction()).then(function(e){return t.push(e),Promise.resolve(r.sendAndConfirmTransaction(t,r.signer.publicKey,[r.signer]))})}catch(e){return Promise.reject(e)}},t.updateSubAccountRules=function(e,n,r,t,o,i,c){try{var s=function(){function e(){function e(){return function(){if(i)return Promise.resolve(a.program.methods.updatePaymentCount(i).accounts({owner:a.signer.publicKey,agent:n,mainAccount:m}).instruction()).then(function(e){function r(){return Promise.resolve(a.sendAndConfirmTransaction(u,a.signer.publicKey,[a.signer]))}u.push(e);var t=function(){if(c)return Promise.resolve(a.program.methods.updatePaymentInterval(c).accounts({owner:a.signer.publicKey,agent:n,mainAccount:m}).instruction()).then(function(e){u.push(e)})}();return t&&t.then?t.then(r):r()})}()}var r=function(){if(o)return Promise.resolve(a.program.methods.updateMaxPerPayment(o).accounts({owner:a.signer.publicKey,agent:n,mainAccount:m}).instruction()).then(function(e){u.push(e)})}();return r&&r.then?r.then(e):e()}var r=function(){if(t)return Promise.resolve(a.program.methods.updateWhitelistedTokens(t).accounts({owner:a.signer.publicKey,agent:n,mainAccount:m}).instruction()).then(function(e){u.push(e)})}();return r&&r.then?r.then(e):e()},a=this,u=[],m=h(Uint8Array.from(e)),l=function(){if(r)return Promise.resolve(a.program.methods.updateWhitelistedPayees(r).accounts({owner:a.signer.publicKey,agent:n,mainAccount:m}).instruction()).then(function(e){u.push(e)})}();return Promise.resolve(l&&l.then?l.then(s):s())}catch(e){return Promise.reject(e)}},t.increaseAllowance=function(e,n,r,t,o,a,u){try{var m=this,l=[],f=h(Uint8Array.from(e)),p=u||i;return Promise.resolve(m.program.methods.increaseSubAccountAllowance(r,t).accounts({owner:m.signer.publicKey,ownerTokenAccount:a||c(o,m.signer.publicKey,!1,p,s),agent:n,mainAccount:f,tokenMint:o,tokenProgram:p}).instruction()).then(function(e){return l.push(e),Promise.resolve(m.sendAndConfirmTransaction(l,m.signer.publicKey,[m.signer]))})}catch(e){return Promise.reject(e)}},t.decreaseAllowance=function(e,n,r,t,o,a,u){try{var m=this,l=[],p=h(Uint8Array.from(e)),y=f(p,m.signer.publicKey),g=u||i;return Promise.resolve(m.program.methods.decreaseSubAccountAllowance(r,t).accounts({owner:m.signer.publicKey,ownerTokenAccount:a||c(o,m.signer.publicKey,!1,g,s),saTokenAccount:c(o,y,!0,g,s),agent:n,mainAccount:p,tokenMint:o,tokenProgram:g}).instruction()).then(function(e){return l.push(e),Promise.resolve(m.sendAndConfirmTransaction(l,m.signer.publicKey,[m.signer]))})}catch(e){return Promise.reject(e)}},t.createSubAccount=function(n,r,t,o,a,u,m,l,f,p,y){try{var g=this,d=[],v=h(Uint8Array.from(n)),P=y||i;return Promise.resolve(g.program.methods.createSubAccount(t,o,a,u,m).accounts({owner:g.signer.publicKey,agent:r,mainAccount:v}).instruction()).then(function(n){function t(e){return Promise.resolve(g.sendAndConfirmTransaction(d,g.signer.publicKey,[g.signer]))}d.push(n);var o=function(){if(l.gt(new e.BN(0))){if(!f)throw new Error("tokenMint must be specified if allowanceAmount is greater than 0");return Promise.resolve(g.program.methods.increaseSubAccountAllowance(l,0).accounts({owner:g.signer.publicKey,ownerTokenAccount:p||c(f,g.signer.publicKey,!1,P,s),agent:r,mainAccount:v,tokenMint:f,tokenProgram:P}).instruction()).then(function(e){d.push(e)})}}();return o&&o.then?o.then(t):t()})}catch(e){return Promise.reject(e)}},r}(p),g=/*#__PURE__*/function(e){function n(){return e.apply(this,arguments)||this}u(n,e),n.initialize=function(){try{return Promise.resolve(e.initialize.call(this))}catch(e){return Promise.reject(e)}};var r=n.prototype;return r.getMainAccountState=function(e){try{return Promise.resolve(this.program.account.mainAccount.fetch(h(Uint8Array.from(e)))).then(function(e){return[e.owner,e.globalWhitelistedPayees]})}catch(e){return Promise.reject(e)}},r.getSubAccountState=function(e){try{var n=h(Uint8Array.from(e));return Promise.resolve(this.program.account.subAccount.fetch(f(n,this.signer.publicKey))).then(function(e){return[e.whitelistedPayees,e.whitelistedTokens,e.paymentInterval,e.paymentCount,e.maxPerPayment,e.lastPaymentTimestamp]})}catch(e){return Promise.reject(e)}},r.paymentRequest=function(e,n,r,t,o,a){try{var u=this,m=[],l=h(Uint8Array.from(e)),p=f(l,u.signer.publicKey),y=a||i;return Promise.resolve(u.program.methods.paymentRequest(r).accounts({agent:u.signer.publicKey,payee:n,mainAccount:l,saTokenAccount:c(t,p,!0,y,s),payeeTokenAccount:o||c(t,n,!1,y,s),tokenMint:t,tokenProgram:y}).instruction()).then(function(e){return m.push(e),Promise.resolve(u.sendAndConfirmTransaction(m,u.signer.publicKey,[u.signer]))})}catch(e){return Promise.reject(e)}},n}(p);export{y as MainAccountTxHandler,g as SubAccountTxHandler};
